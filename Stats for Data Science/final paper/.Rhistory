catg.barplot <-ggplot(data=app.df, aes(x=Category)) +
geom_bar(stat="count", fill="white") + ggtitle("Bar chart of categories") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); catg.barplot
catg.barplot <-ggplot(data=app.df, aes(x=Category)) +
geom_bar(stat="count", fill="blue") + ggtitle("Bar chart of categories") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); catg.barplot
catg.barplot <-ggplot(data=app.df, aes(x=Category)) +
geom_bar(stat="count", fill="steelblue") + ggtitle("Bar chart of categories") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); catg.barplot
typeof(app.df$Genres)
class(app.df$Genres)
str(app.df$Genres)
str(app.df$Category)
# histogram of rating
hist.rating <- ggplot(data=app.df, aes(x=Rating)) +
geom_histogram(fill="steelblue") + ggtitle("Histogram of Rating")
#+theme(axis.text.x=element_text(angle=50, hjust = 1))
; hist.rating
# histogram of rating
hist.rating <- ggplot(data=app.df, aes(x=Rating)) +
geom_histogram(fill="steelblue") + ggtitle("Histogram of Rating")
#+theme(axis.text.x=element_text(angle=50, hjust = 1))
; hist.rating
# histogram of rating
hist.rating <- ggplot(data=app.df, aes(x=Rating)) +
geom_histogram(fill="steelblue") + ggtitle("Histogram of Rating"); hist.rating
# histogram of rating
hist.rating <- ggplot(data=app.df, aes(x=Rating)) +
geom_freqpoly(fill="steelblue") + ggtitle("Histogram of Rating"); hist.rating
# histogram of rating
hist.rating <- ggplot(data=app.df, aes(x=Rating)) +
geom_area(fill="steelblue") + ggtitle("Histogram of Rating"); hist.rating
# histogram of rating
hist.rating <- ggplot(data=app.df, aes(x=Rating)) +
geom_area(stat="bin", fill="steelblue") + ggtitle("Histogram of Rating"); hist.rating
# boxplot of rating vs category
boxp.rating.catg <- ggplot(data=app.df, aes(x=Category,y=Rating)) +
geom_boxplot()
# boxplot of rating vs category
boxp.rating.catg <- ggplot(data=app.df, aes(x=Category,y=Rating)) +
geom_boxplot();boxp.rating.catg
# boxplot of rating vs category
boxp.rating.catg <- ggplot(data=app.df, aes(x=Category,y=Rating)) +
geom_boxplot() + ggtitle("Box Plot of Rating v.s. Category") +
theme(axis.text.x=element_text(angle=50, hjust = 1))  ;boxp.rating.catg
# Distribution of rating
hist.rating <- ggplot(data=app.df, aes(x=Rating)) +
geom_histogram(stat="bin", fill="steelblue") +
ggtitle("Histogram of Rating"); hist.rating
# histogram of price
hist.price <- ggplot(data=app.df, aes(x=Price)) +
geom_histogram(stat="bin", fill="steelblue") +
ggtitle("Histogram of Price"); hist.price
# histogram of price
hist.price <- ggplot(data=app.df, aes(x=Price)) +
geom_area(stat="bin", fill="steelblue") +
ggtitle("Histogram of Price"); hist.price
# scatterplot of rating vs price
scat.rating.price <- ggplot(data=app.df, aes(x=Price,y=Rating)) +
geom_point() + ggtitle("Box Plot of Rating v.s. Category") ; scat.rating.price
# scatterplot of rating vs price
scat.rating.price <- ggplot(data=app.df, aes(x=Price,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Price") ; scat.rating.price
# histogram of reviews
# scatter plot of rating vs reviews
scat.rating.review <- ggplot(data=app.df, aes(x=Reviews,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Reviews") ; scat.rating.review
# histogram of installs
# scatter plot of rating vs installs
scat.rating.install <- ggplot(data=app.df, aes(x=Installs,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Installs") ; scat.rating.install
+ theme(axis.text.x=element_text(angle=50, hjust = 1)); scat.rating.install
# histogram of installs
# scatter plot of rating vs installs
scat.rating.install <- ggplot(data=app.df, aes(x=Installs,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Installs") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); scat.rating.install
app.df$Installs <- as.numeric(app.df$Installs)
# scatter plot of rating vs installs
scat.rating.install <- ggplot(data=app.df, aes(x=Installs,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Installs") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); scat.rating.install
app.df$Installs
app.df <- data.frame(stringsAsFactors = FALSE)
app.df <- read.csv("google-play-store-apps/googleplaystore.csv")
# delete the row with problematic data
app.df <- app.df[-c(10473),]
library(stringr)
library(naniar)
# first, replace "Varies with device" with N/A (and replace it with mean later)
app.df <- replace_with_na(app.df, replace=list(Size=c("Varies with device")))
# remove the unit (M or k), make this columns numeric and use M as the unit
size.temp <- as.character(app.df$Size)
for(i in 1:length(size.temp))
{
if (is.na(size.temp[i]))
{
next
}
else if(str_sub(size.temp[i], -1, -1) == "M")
{
size.temp[i] <- str_sub(size.temp[i], end=-2)
}
else if (str_sub(size.temp[i], -1, -1) == "k")
{
size.temp[i] <- str_sub(size.temp[i], end=-2)
size.temp[i] <- as.numeric(size.temp[i])/1024
}
else if (str_sub(size.temp[i], -1, -1) == "+")
{
size.temp[i] <- str_sub(size.temp[i], end=-2)
}
}
size.temp <- as.numeric(size.temp)
df.temp <-app.df
df.temp$Size <-  size.temp
# calculate the mean size value of each category
size.meanByCatg <- aggregate(Size ~ Category, df.temp, FUN=mean)
# replace N/A (originally Varies with device) with the mean size value of each category
for(i in 1:nrow(df.temp))
{
if (is.na(df.temp[i,]$Size))
{
df.temp[i,]$Size <- size.meanByCatg[size.meanByCatg$Category==df.temp[i,]$Category,]$Size
}
}
app.df <- df.temp
app.df$Size <- round(app.df$Size, digits = 3)
# cleaning installs: get rid of "+", and turn numeric
install.temp <- as.character(app.df$Installs)
for (i in 1:length(install.temp))
{
if(str_sub(install.temp[i], -1, -1) == "+")
{
install.temp[i] <- str_sub(install.temp[i], end=-2)
}
}
View(install.temp)
app.df$Installs <-install.temp
# cleaning price: remove "$", and turn numeric
price.temp <- as.character(app.df$Price)
for (i in 1:length(price.temp))
{
if(str_sub(price.temp[i], 1, 1) == "$")
{
price.temp[i] <- str_sub(price.temp[i], start=2, end=-1)
}
}
app.df$Price <- as.numeric(price.temp)
class(app.df$Installs)
as.numeric(app.df$Installs)
app.df$Installs
str(app.df$Installs)
as.character(app.df$Installs)
as.numeric(as.character(app.df$Installs))
as.numeric(gsub(",","",app.df$Installs))
app.df$Installs <- as.numeric(gsub(",","",app.df$Installs))
# scatter plot of rating vs installs
scat.rating.install <- ggplot(data=app.df, aes(x=Installs,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Installs") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); scat.rating.install
# histogram of size
# scatter plot of rating vs size
scat.rating.size <- ggplot(data=app.df, aes(x=Size,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Size") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); scat.rating.size
# bar chart of content rating
barplot.content <-ggplot(data=app.df, aes(x=Content.Rating)) +
geom_bar(stat="count", fill="steelblue") + ggtitle("Bar chart of Content Rating") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); barplot.content
# boxplot of rating vs content rating
boxp.rating.content <- ggplot(data=app.df, aes(x=Content.Rating,y=Rating)) +
geom_boxplot() + ggtitle("Box Plot of Rating v.s. Content.Rating") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); boxp.rating.content
app.df$Last.Updated <- as.Date(app.df$Last.Updated, format="%B %d, %Y")
max(app.df$Last.Updated) # 2018-08-08 (the lastest updated date of all apps)
# add a column "DaysFromLastUpdate"
#(assume today is the day of the lastest updated date of all apps in the dataset (2018-08-08))
app.df$DaysFromLastUpdate <- as.Date("2018-08-08") - as.Date(app.df$Last.Updated, format="%B %d, %Y")
# histogram of days from last update
hist.lastUpdate <- ggplot(data=app.df, aes(x=DaysFromLastUpdate)) +
geom_histogram(stat="bin", fill="steelblue") +
ggtitle("Histogram of Rating"); hist.lastUpdate
# histogram of days from last update
hist.lastUpdate <- ggplot(data=app.df, aes(x=DaysFromLastUpdate)) +
geom_histogram(stat="bin", fill="steelblue") +
ggtitle("Histogram of Rating") + scale_x_continuous(limits = c(0,1000)); hist.lastUpdate
# histogram of days from last update
hist.lastUpdate <- ggplot(data=app.df, aes(x=DaysFromLastUpdate)) +
geom_histogram(stat="count", fill="steelblue") +
ggtitle("Histogram of Rating") + scale_x_continuous(limits = c(0,1000)); hist.lastUpdate
# histogram of days from last update
hist.lastUpdate <- ggplot(data=app.df, aes(x=DaysFromLastUpdate)) +
geom_histogram(stat="count", fill="steelblue") +
ggtitle("Histogram of Rating") + scale_x_continuous(limits = c(0,500)); hist.lastUpdate
# bar chart of content rating
barplot.content <-ggplot(data=app.df, aes(x=Content.Rating)) +
geom_bar(stat="count", fill="steelblue") + ggtitle("Bar chart of Content Rating") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); barplot.content
# boxplot of rating vs content rating
boxp.rating.content <- ggplot(data=app.df, aes(x=Content.Rating,y=Rating)) +
geom_boxplot() + ggtitle("Box Plot of Rating v.s. Content.Rating") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); boxp.rating.content
# histogram of size
# scatter plot of rating vs size
scat.rating.size <- ggplot(data=app.df, aes(x=Size,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Size") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); scat.rating.size
# histogram of size
# scatter plot of rating vs size
scat.rating.size <- ggplot(data=app.df, aes(x=Size,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Size"); scat.rating.size
# scatter plot of rating vs days from last update
scat.rating.size <- ggplot(data=app.df, aes(x=DaysFromLastUpdate,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Days From Last Update"); scat.rating.size
# scatter plot of rating vs days from last update
scat.rating.size <- ggplot(data=app.df, aes(x=DaysFromLastUpdate,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Days From Last Update") +
scale_x_continuous(limits = c(0,500)); scat.rating.size
# scatter plot of rating vs days from last update
scat.rating.size <- ggplot(data=app.df, aes(x=DaysFromLastUpdate,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Days From Last Update") +
scale_x_continuous(limits = c(0,100)); scat.rating.size
# scatter plot of rating vs days from last update
scat.rating.size <- ggplot(data=app.df, aes(x=DaysFromLastUpdate,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Days From Last Update") +
scale_x_continuous(limits = c(0,500)); scat.rating.size
# scatter plot of rating vs days from last update
scat.rating.size <- ggplot(data=app.df, aes(x=DaysFromLastUpdate,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Days From Last Update") +
scale_x_continuous(limits = c(0,100)); scat.rating.size
# scatter plot of rating vs days from last update
scat.rating.size <- ggplot(data=app.df, aes(x=DaysFromLastUpdate,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Days From Last Update") +
scale_x_continuous(limits = c(0,500)); scat.rating.size
# scatter plot of rating vs days from last update
scat.rating.size <- ggplot(data=app.df, aes(x=DaysFromLastUpdate,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Days From Last Update") +
scale_x_continuous(limits = c(0,100)); scat.rating.size
5
# scatter plot of rating vs days from last update
scat.rating.size <- ggplot(data=app.df, aes(x=DaysFromLastUpdate,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Days From Last Update") +
scale_x_continuous(limits = c(0,500)); scat.rating.size
# output data frame to csv file
write.csv(app.df, "apps.csv")
###################### regression model
require(mosaic)
lm1 = lm(Rating ~ Category + Reviews + Size + Installs +
Price + Content.Rating + Genres + DaysFromLastUpdate, data=app.df)
summary(lm1)
###################### regression
typeof(app.df$Reviews)
class(app.df$Reviews)
app.df$Reviews <- as.numeric(app.df$Reviews)
app.df$Reviews <- as.factor(app.df$Reviews)
app.df <- data.frame(stringsAsFactors = FALSE)
app.df <- read.csv("google-play-store-apps/googleplaystore.csv")
View(app.df)
# delete the row with problematic data
app.df <- app.df[-c(10473),]
library(stringr)
library(naniar)
# first, replace "Varies with device" with N/A (and replace it with mean later)
app.df <- replace_with_na(app.df, replace=list(Size=c("Varies with device")))
# remove the unit (M or k), make this columns numeric and use M as the unit
size.temp <- as.character(app.df$Size)
for(i in 1:length(size.temp))
{
if (is.na(size.temp[i]))
{
next
}
else if(str_sub(size.temp[i], -1, -1) == "M")
{
size.temp[i] <- str_sub(size.temp[i], end=-2)
}
else if (str_sub(size.temp[i], -1, -1) == "k")
{
size.temp[i] <- str_sub(size.temp[i], end=-2)
size.temp[i] <- as.numeric(size.temp[i])/1024
}
else if (str_sub(size.temp[i], -1, -1) == "+")
{
size.temp[i] <- str_sub(size.temp[i], end=-2)
}
}
size.temp <- as.numeric(size.temp)
df.temp <-app.df
df.temp$Size <-  size.temp
# calculate the mean size value of each category
size.meanByCatg <- aggregate(Size ~ Category, df.temp, FUN=mean)
# replace N/A (originally Varies with device) with the mean size value of each category
for(i in 1:nrow(df.temp))
{
if (is.na(df.temp[i,]$Size))
{
df.temp[i,]$Size <- size.meanByCatg[size.meanByCatg$Category==df.temp[i,]$Category,]$Size
}
}
app.df <- df.temp
app.df$Size <- round(app.df$Size, digits = 3)
# cleaning installs: get rid of "+", and turn numeric
install.temp <- as.character(app.df$Installs)
for (i in 1:length(install.temp))
{
if(str_sub(install.temp[i], -1, -1) == "+")
{
install.temp[i] <- str_sub(install.temp[i], end=-2)
}
}
app.df$Installs <-install.temp
app.df$Installs <- as.numeric(gsub(",","",app.df$Installs))
# cleaning price: remove "$", and turn numeric
price.temp <- as.character(app.df$Price)
for (i in 1:length(price.temp))
{
if(str_sub(price.temp[i], 1, 1) == "$")
{
price.temp[i] <- str_sub(price.temp[i], start=2, end=-1)
}
}
app.df$Price <- as.numeric(price.temp)
app.df$Last.Updated <- as.Date(app.df$Last.Updated, format="%B %d, %Y")
as.Date("2018-08-08")
# add a column "DaysFromLastUpdate"
#(assume today is the day of the lastest updated date of all apps in the dataset (2018-08-08))
app.df$DaysFromLastUpdate <- as.Date("2018-08-08") - as.Date(app.df$Last.Updated, format="%B %d, %Y")
as.numeric(as.character(app.df$Reviews))
# turn Reviews into numeric
app.df$Reviews <- as.numeric(as.character(app.df$Reviews))
# output data frame to csv file
write.csv(app.df, "apps.csv")
lm1 = lm(Rating ~ Category + Reviews + Size + Installs +
Price + Content.Rating + Genres + DaysFromLastUpdate, data=app.df)
summary(lm1)
lm1 = lm(Rating ~ Reviews + Size + Installs +
Price + Content.Rating + Genres + DaysFromLastUpdate, data=app.df)
summary(lm1)
lm1 = lm(Rating ~ Reviews + Content.Rating + Genres + DaysFromLastUpdate, data=app.df)
summary(lm1)
lm1 = lm(Rating ~ Reviews + Genres + DaysFromLastUpdate, data=app.df)
summary(lm1)
lm1 = lm(Rating ~ log(Reviews) + Genres + DaysFromLastUpdate, data=app.df)
summary(lm1)
lm1 = lm(Rating ~ log(Reviews) + Genres + log(DaysFromLastUpdate), data=app.df)
lm1 = lm(Rating ~ log(Reviews) + Genres + log(as.numeric(DaysFromLastUpdate)), data=app.df)
lm1 = lm(Rating ~ log(Reviews) + Genres + DaysFromLastUpdate, data=app.df)
summary(lm1)
plot(lm1, which=1)
lm1 = lm(Rating ~ Reviews + Genres + DaysFromLastUpdate, data=app.df)
summary(lm1)
plot(lm1, which=1)
lm1 = lm(Rating ~ log(Reviews) + Genres + DaysFromLastUpdate, data=app.df)
summary(lm1)
plot(lm1, which=1)
lm1
# Define the smallest model
smallest <- Rating~ 1
# Define the biggest model
biggest <- Rating ~ Category + log(Reviews) + Size + Installs + Price +
Content.Rating + Genres + DaysFromLastUpdate
# define the model to start
m <- lm(Rating ~ log(Reviews), data=app.df)
# it does forward selection of the variables for us
stats::step(m, scope=list(lower=smallest, upper=biggest))
summary(lm2)
plot(lm2, which=1)
# result of forward selection
lm2 = lm(formula = Rating ~ log(Reviews) + Category + DaysFromLastUpdate +
Size + Installs, data = app.df)
summary(lm2)
plot(lm2, which=1)
# Define the biggest model
biggest <- Rating ~ Category + log(Reviews) + Size + log(Installs) + Price +
Content.Rating + Genres + DaysFromLastUpdate
# define the model to start
m <- lm(Rating ~ log(Reviews), data=app.df)
# it does forward selection of the variables for us
stats::step(m, scope=list(lower=smallest, upper=biggest))
# result of forward selection
lm2 = lm(formula = Rating ~ log(Reviews) + log(Installs) + Category +
DaysFromLastUpdate + Size + Price, data = app.df)
summary(lm2)
plot(lm2, which=1)
# define the model to start
m <- lm(Rating ~ 1, data=app.df)
# it does forward selection of the variables for us
stats::step(m, scope=list(lower=smallest, upper=biggest))
# Define the smallest model
smallest <- Rating~ 1
# Define the biggest model
biggest <- Rating ~ Category + log(Reviews) + Size + log(Installs) + Price +
Content.Rating + Genres + DaysFromLastUpdate
# define the model to start
m <- lm(Rating ~ 1, data=app.df)
# it does forward selection of the variables for us
stats::step(m, scope=list(lower=smallest, upper=biggest))
# result of forward selection
lm2 = lm(formula = Rating ~ log(Reviews) + log(Installs) + Category +
DaysFromLastUpdate + Size + Price, data = app.df)
summary(lm2)
plot(lm2, which=1)
lm1 = lm(Rating ~ Category + log(Reviews) + Size + log(Installs) + Price +
Content.Rating + Genres + DaysFromLastUpdate, data=app.df)
summary(lm1)
lm1 = lm(Rating ~ log(Reviews) + Size + log(Installs) + Price +
Genres + DaysFromLastUpdate, data=app.df)
summary(lm1)
plot(lm1, which=1)
# ch12 Q14 (c)
# Define the biggest model
biggest <- Rating ~ Category + log(Reviews) + Size + log(Installs) + Price +
Content.Rating + Genres + DaysFromLastUpdate
m <- lm(biggest, data=app.df)
# it does backward selection of the variables for us
stats::step(m, direction="backward")
# ch12 Q14 (d)
# Define the smallest model
smallest <- Rating~ 1
# Define the biggest model
biggest <- Rating ~ Category + log(Reviews) + Size + log(Installs) + Price +
Content.Rating + Genres + DaysFromLastUpdate
# define the model to start
m <- lm(Rating~ 1, data=app.df)
# it does stepwise selection of the variables for us
stats::step(m, scope=list(lower=smallest, upper=biggest), direction="both")
# result of forward selection
lm2 = lm(formula = Rating ~ log(Reviews) + log(Installs) + Category +
DaysFromLastUpdate + Size + Price, data = app.df)
pred2 = predict(lm2, se.fit = TRUE, newdata = app.df)
pred2
pred.fit <- pred2$fit
pred.fit
summary(lm2)
# bar chart of category
catg.barplot <-ggplot(data=app.df, aes(x=Category)) +
geom_bar(stat="count", fill="steelblue") + ggtitle("Bar chart of categories") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); catg.barplot
# Histogram of rating
hist.rating <- ggplot(data=app.df, aes(x=Rating)) +
geom_histogram(stat="bin", fill="steelblue") +
ggtitle("Histogram of Rating"); hist.rating
# boxplot of rating vs category
boxp.rating.catg <- ggplot(data=app.df, aes(x=Category,y=Rating)) +
geom_boxplot() + ggtitle("Box Plot of Rating v.s. Category") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); boxp.rating.catg
# histogram of price
hist.price <- ggplot(data=app.df, aes(x=Price)) +
geom_area(stat="bin", fill="steelblue") +
ggtitle("Histogram of Price"); hist.price
# scatterplot of rating vs price
scat.rating.price <- ggplot(data=app.df, aes(x=Price,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Price") ; scat.rating.price
# histogram of reviews
# scatter plot of rating vs reviews
scat.rating.review <- ggplot(data=app.df, aes(x=Reviews,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Reviews") ; scat.rating.review
# scatter plot of rating vs installs
scat.rating.install <- ggplot(data=app.df, aes(x=Installs,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Installs") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); scat.rating.install
# histogram of size
# scatter plot of rating vs size
scat.rating.size <- ggplot(data=app.df, aes(x=Size,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Size"); scat.rating.size
# bar chart of content rating
barplot.content <-ggplot(data=app.df, aes(x=Content.Rating)) +
geom_bar(stat="count", fill="steelblue") + ggtitle("Bar chart of Content Rating") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); barplot.content
# boxplot of rating vs content rating
boxp.rating.content <- ggplot(data=app.df, aes(x=Content.Rating,y=Rating)) +
geom_boxplot() + ggtitle("Box Plot of Rating v.s. Content.Rating") +
theme(axis.text.x=element_text(angle=50, hjust = 1)); boxp.rating.content
# histogram of days from last update (< 500 days)
hist.lastUpdate <- ggplot(data=app.df, aes(x=DaysFromLastUpdate)) +
geom_histogram(stat="count", fill="steelblue") +
ggtitle("Histogram of Rating") +
scale_x_continuous(limits = c(0,500)); hist.lastUpdate
# scatter plot of rating vs days from last update (< 500 days)
scat.rating.size <- ggplot(data=app.df, aes(x=DaysFromLastUpdate,y=Rating)) +
geom_point() + ggtitle("Scatter Plot of Rating v.s. Days From Last Update") +
scale_x_continuous(limits = c(0,500)); scat.rating.size
plot(lm2, which=1)
install.packages(c("corrplot", "DataExplorer", "ggcorrplot", "ggExtra", "ggthemes", "kableExtra", "plotly", "VIM"))
confint(lm2)
app.df <- read.csv("apps.csv")
library(ggplot2)
require(Sleuth3)
require(mosaic)
lm1 = lm(Rating ~ log(Reviews) + Size + log(Installs) + Price +
Genres + DaysFromLastUpdate, data=app.df)
summary(lm1)
plot(lm1, which=1)
# Define the smallest model
smallest <- Rating~ 1
# Define the biggest model
biggest <- Rating ~ Category + log(Reviews) + Size + log(Installs) + Price +
Content.Rating + Genres + DaysFromLastUpdate
# define the model to start
m <- lm(Rating ~ 1, data=app.df)
# it does forward selection of the variables for us
stats::step(m, scope=list(lower=smallest, upper=biggest))
# result of forward selection
lm2 = lm(formula = Rating ~ log(Reviews) + log(Installs) + Category +
DaysFromLastUpdate + Size + Price, data = app.df)
summary(lm2)
plot(lm2, which=1)
confint(lm2)
lm2
confint(lm2)[3]
confint(lm2)[3,]
